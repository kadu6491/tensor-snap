{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/kadutwum/Desktop/School/Indepedent/tensor-snap/src/component/Camera/CameraView.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Camera } from 'expo-camera';\nimport * as tf from '@tensorflow/tfjs';\nimport * as mn from '@tensorflow-models/mobilenet';\nimport { fetch } from '@tensorflow/tfjs-react-native';\nimport * as jpeg from 'jpeg-js';\nimport FlipCameraButton from \"../Buttons/FlipCameraButton\";\nimport SnapButton from \"../Buttons/SnapButton\";\nimport ImageView from \"./ImageView\";\nvar camera = Camera;\nexport default function CameraView(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      previewVisible = _useState6[0],\n      setPreviewVisible = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      capturedImage = _useState8[0],\n      setCapturedImage = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      label = _useState12[0],\n      setLabel = _useState12[1];\n\n  var takePicture = function takePicture() {\n    var photo;\n    return _regeneratorRuntime.async(function takePicture$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (camera) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(camera.takePictureAsync());\n\n          case 4:\n            photo = _context.sent;\n            console.log(photo);\n            setPreviewVisible(true);\n            setCapturedImage(photo);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var retakePicture = function retakePicture() {\n    setCapturedImage(null);\n    setPreviewVisible(false);\n  };\n\n  function getPrediction(url) {\n    var model, response, imageData, imageTensor, prediction;\n    return _regeneratorRuntime.async(function getPrediction$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(\"loading\");\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(tf.ready());\n\n          case 3:\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(mn.load());\n\n          case 5:\n            model = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(fetch(url, {}, {\n              isBinary: true\n            }));\n\n          case 8:\n            response = _context2.sent;\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.arrayBuffer());\n\n          case 11:\n            imageData = _context2.sent;\n            imageTensor = imageToTensor(imageData);\n            setLoading(\"Getting Classification Result....\");\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(model.classify(imageTensor));\n\n          case 16:\n            prediction = _context2.sent;\n            console.log(prediction[0]);\n            setLoading(\"done\");\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function imageToTensor(rawData) {\n    var _jpeg$decode = jpeg.decode(rawData, true),\n        width = _jpeg$decode.width,\n        height = _jpeg$decode.height,\n        data = _jpeg$decode.data;\n\n    var buffer = new Uint8Array(width * height * 3);\n    var offset = 0;\n\n    for (var i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      buffer[i + 3] = data[offset + 3];\n      offset += 4;\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context3.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, previewVisible && capturedImage ? React.createElement(ImageView, {\n    photo: capturedImage,\n    retakePicture: retakePicture,\n    loading: loading,\n    navigation: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }) : React.createElement(Camera, {\n    style: styles.camera,\n    type: type,\n    ref: function ref(r) {\n      camera = r;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, React.createElement(FlipCameraButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), React.createElement(SnapButton, {\n    takePicture: takePicture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/kadutwum/Desktop/School/Indepedent/tensor-snap/src/component/Camera/CameraView.js"],"names":["React","useState","useEffect","Camera","tf","mn","fetch","jpeg","FlipCameraButton","SnapButton","ImageView","camera","CameraView","navigation","hasPermission","setHasPermission","Constants","Type","back","type","setType","previewVisible","setPreviewVisible","capturedImage","setCapturedImage","loading","setLoading","label","setLabel","takePicture","takePictureAsync","photo","console","log","retakePicture","getPrediction","url","ready","load","model","isBinary","response","arrayBuffer","imageData","imageTensor","imageToTensor","classify","prediction","rawData","decode","width","height","data","buffer","Uint8Array","offset","i","length","tensor3d","requestPermissionsAsync","status","styles","container","r","StyleSheet","create","flex","buttonContainer","backgroundColor","flexDirection","margin","button","alignSelf","alignItems","text","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Camera } from 'expo-camera';\n\nimport * as tf from '@tensorflow/tfjs'\nimport * as mn from '@tensorflow-models/mobilenet'\nimport {fetch} from '@tensorflow/tfjs-react-native'\nimport * as jpeg from 'jpeg-js'\n\nimport FlipCameraButton from '../Buttons/FlipCameraButton';\nimport SnapButton from '../Buttons/SnapButton';\nimport ImageView from './ImageView';\n\n\nlet camera = Camera\n\nexport default function CameraView({navigation}) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n  const [previewVisible, setPreviewVisible] = useState(false)\n  const [capturedImage, setCapturedImage] = useState(null)\n  const [loading, setLoading] = useState('')\n  const [label, setLabel] = useState([])\n\n  const takePicture = async () => {\n      if (!camera) return\n      const photo = await camera.takePictureAsync()\n      console.log(photo)\n      setPreviewVisible(true)\n      setCapturedImage(photo)\n      // getPrediction(photo.uri)\n  }\n  \n  const retakePicture = () => {\n      setCapturedImage(null)\n      setPreviewVisible(false)\n  }\n\n  async function getPrediction(url){\n      setLoading(\"loading\")\n      await tf.ready()\n      const model = await mn.load()\n      const response = await fetch(url, {}, {isBinary: true})\n      const imageData = await response.arrayBuffer()\n      const imageTensor = imageToTensor(imageData)\n      setLoading(\"Getting Classification Result....\")\n      const prediction = await model.classify(imageTensor)\n      console.log(prediction[0])\n      setLoading(\"done\")\n  }\n\n  function imageToTensor(rawData){\n    const {width, height, data} = jpeg.decode(rawData, true)\n    const buffer = new Uint8Array(width*height*3)\n    let offset = 0;\n    for(let i = 0; i < buffer.length; i+=3)\n    {\n        buffer[i] = data[offset]\n        buffer[i + 1] = data[offset + 1]\n        buffer[i + 2] = data[offset + 2]\n        buffer[i + 3] = data[offset + 3]\n        offset += 4\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3])\n}\n\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await Camera.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n  return (\n    <View style={styles.container}>\n      {previewVisible && capturedImage ? (\n        <ImageView \n          photo={capturedImage} \n          retakePicture={retakePicture}\n          loading={loading}\n          navigation={navigation}\n        />) : (\n        <Camera \n        style={styles.camera} \n        type={type}\n        ref={(r) => {\n          camera = r\n        }}\n      >\n        <FlipCameraButton />\n        <SnapButton takePicture={takePicture} />\n      </Camera>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20,\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 18,\n    color: 'white',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}